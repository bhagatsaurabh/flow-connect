import{_ as o,r as c,o as l,c as i,b as e,a,w as t,e as n,d as p}from"./app.6c1464b6.js";const r={},u=e("h1",{id:"flow",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#flow","aria-hidden":"true"},"#"),n(" Flow")],-1),k=e("h2",{id:"creating-a-flow",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#creating-a-flow","aria-hidden":"true"},"#"),n(" Creating a Flow")],-1),d=n("A Flow is a set of "),v=n("Nodes"),g=n(", "),m=n("Connectors"),f=n(" and "),b=n("Groups"),y=n(", it can also contain "),_=n("SubFlowNodes"),h=n("."),w=e("br",null,null,-1),q=n("FlowConnect.createFlow"),C=p(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> flow <span class="token operator">=</span> flowConnect<span class="token punctuation">.</span><span class="token function">createFlow</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Basic Example&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> flow <span class="token operator">=</span> flowConnect<span class="token punctuation">.</span><span class="token function">createFlow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Detailed Example&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">r</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;r&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;image&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">g</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;g&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;image&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;image&quot;</span><span class="token punctuation">]</span>
    <span class="token literal-property property">image</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;image&#39;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">ruleColors</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">r</span><span class="token operator">:</span> Color<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&#39;#ff0000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">g</span><span class="token operator">:</span> Color<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&#39;#00ff00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> Color<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&#39;#0000ff&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">image</span><span class="token operator">:</span> Color<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&#39;#0ffff0&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="creating-rules" tabindex="-1"><a class="header-anchor" href="#creating-rules" aria-hidden="true">#</a> Creating Rules</h2><br>`,5),x=n("Rules"),j=n(" specified for a Flow acts as constraints when connecting "),F=n("terminals"),A=n(" of diferent "),N=n("nodes"),T=n(" together."),B=e("br",null,null,-1),D=e("br",null,null,-1),R=n(" If you need to create a Flow that restricts terminals with "),V=n("dataType"),E=p(` &#39;A&#39; to be only connected to other terminals of dataType &#39;C&#39; or &#39;D&#39;, then the rule for such a constraint will be: <div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token constant">A</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;D&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br> If two dataTypes can be connected bi-directionally, then you need to specify rules for them explicitly, for e.g. If terminals with dataType &#39;C&#39; can also be connected to &#39;A&#39;, then the rule becomes: <div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token constant">A</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token constant">C</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br> Some dataTypes are in-built and every Flow have these rules by default: <div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&#39;string&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;string&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;any&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;number&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;number&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;audioparam&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;any&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;boolean&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;boolean&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;any&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;array&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;array&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;any&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;file&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;file&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;any&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;event&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;event&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;any&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;vector&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;vector&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;any&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;array-buffer&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;array-buffer&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;any&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;audio&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;audio&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;audioparam&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;audioparam&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;audioparam&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;audio-buffer&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;audio-buffer&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;any&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;any&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;any&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8);function I(S,G){const s=c("Ref");return l(),i("div",null,[u,k,e("p",null,[d,a(s,{to:"/reference/api/classes/node"},{default:t(()=>[v]),_:1}),g,a(s,{to:"/reference/api/classes/connector"},{default:t(()=>[m]),_:1}),f,a(s,{to:"/reference/api/classes/group"},{default:t(()=>[b]),_:1}),y,a(s,{to:"/reference/api/classes/subflow-node"},{default:t(()=>[_]),_:1}),h]),w,a(s,{to:"/reference/api/classes/flow-connect#createflow"},{default:t(()=>[q]),_:1}),C,a(s,{to:"/reference/api/interfaces/rules"},{default:t(()=>[x]),_:1}),j,a(s,{to:"/reference/api/classes/terminal"},{default:t(()=>[F]),_:1}),A,a(s,{to:"/reference/api/classes/node"},{default:t(()=>[N]),_:1}),T,B,D,R,a(s,{to:"/reference/api/classes/terminal#datatype"},{default:t(()=>[V]),_:1}),E])}var H=o(r,[["render",I],["__file","flow.html.vue"]]);export{H as default};
