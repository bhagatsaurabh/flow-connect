import{_ as r,r as a,o as d,c,b as t,a as o,w as s,e}from"./app.6c1464b6.js";const l={},_=t("h1",{id:"interface-datafetchprovider",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#interface-datafetchprovider","aria-hidden":"true"},"#"),e(" Interface: DataFetchProvider")],-1),h=t("p",null,"A user provided function that abstracts the retrieval of external files that was being used by any of the nodes before serializing the Flow to JSON.",-1),f=e("For e.g. a "),u=e("Source"),p=e(" StandardNode from "),w=e("Audio"),m=e(" package can hold a reference of user provided audio file, since this file cannot be serialized while calling "),v=e("FlowConnect"),b=t("em",null,".toJson()",-1),g=e(" in its basic form, an optional argument can be passed which handles where and how the file is actually stored."),F=e("While serializing a flow using "),x=e("FlowConnect"),y=t("em",null,".toJson()",-1),C=e(", everytime a file is encountered, "),N=e("DataPersistenceProvider"),k=e(" (a developer implemented function) will handle persistence of the files where each stored file will have a unique id."),z=e("When de-serializing using "),J=e("FlowConnect"),P=t("em",null,".fromJson()",-1),B=e(", FlowConnect will invoke this function whenever a stored file id and its name is encountered in serialized flow JSON, the same unique id will be passed as the first argument, and this function should return a Blob back corresponding to the file that was stored previously."),R=e(""),S=e(" (meta: "),j=e("RawMetadata"),V=e(") => Promise<"),q=e("Raw"),A=e(`>
`);function D(O,W){const n=a("Ref"),i=a("Function");return d(),c("div",null,[_,h,t("p",null,[f,o(n,{to:"/reference/standard-nodes/audio/source"},{default:s(()=>[u]),_:1}),p,o(n,{to:"/reference/standard-nodes/audio"},{default:s(()=>[w]),_:1}),m,o(n,{to:"/reference/api/classes/flow-connect#tojson"},{default:s(()=>[v,b]),_:1}),g]),t("p",null,[F,o(n,{to:"/reference/api/classes/flow-connect#tojson"},{default:s(()=>[x,y]),_:1}),C,o(n,{to:"/reference/api/interfaces/data-persistence-provider"},{default:s(()=>[N]),_:1}),k]),t("p",null,[z,o(n,{to:"/reference/api/classes/flow-connect#fromjson"},{default:s(()=>[J,P]),_:1}),B]),t("pre",null,[R,o(i),S,o(n,{to:"./raw-metadata"},{default:s(()=>[j]),_:1}),V,o(n,{to:"../types/raw"},{default:s(()=>[q]),_:1}),A])])}var I=r(l,[["render",D],["__file","data-fetch-provider.html.vue"]]);export{I as default};
