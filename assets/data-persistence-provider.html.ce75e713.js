import{_ as r,r as a,o as c,c as d,b as t,a as o,w as s,e}from"./app.6c1464b6.js";const l={},_=t("h1",{id:"interface-datapersistenceprovider",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#interface-datapersistenceprovider","aria-hidden":"true"},"#"),e(" Interface: DataPersistenceProvider")],-1),h=t("p",null,"A user provided function that abstracts the storage of external files being used by any of the nodes.",-1),f=e("For e.g. a "),u=e("Source"),p=e(" StandardNode from "),m=e("Audio"),w=e(" package can hold a reference of user provided audio file, since this file cannot be serialized while calling "),v=e("FlowConnect"),b=t("em",null,".toJson()",-1),g=e(" in its basic form, an optional argument can be passed which handles where and how the file is actually stored."),x=e("While serializing a flow using "),F=e("FlowConnect"),y=t("em",null,".toJson()",-1),B=e(", everytime a file is encountered, this function will be called with a unique id and a reference to the actual file."),C=t("p",null,"The implementation of this function is up to the developer, whether the files needs to be stored in an IndexedDB or stored temporarily as a Blob reference or archiving in a file...",-1),P=e("When de-serializing using "),N=e("FlowConnect"),k=t("em",null,".fromJson()",-1),z=e(", the same unique ids will be passed to a "),J=e("DataFetchProvider"),R=e(", which is another developer implemented function that returns a Blob back whenever FlowConnect encounters a stored file in serialized flow JSON."),j=e(""),D=e(" (id: string, ref: "),S=e("Raw"),V=e(") => Promise<"),q=e("RawMetadata"),A=e(`>
`);function I(T,W){const n=a("Ref"),i=a("Function");return c(),d("div",null,[_,h,t("p",null,[f,o(n,{to:"/reference/standard-nodes/audio/source"},{default:s(()=>[u]),_:1}),p,o(n,{to:"/reference/standard-nodes/audio"},{default:s(()=>[m]),_:1}),w,o(n,{to:"/reference/api/classes/flow-connect#tojson"},{default:s(()=>[v,b]),_:1}),g]),t("p",null,[x,o(n,{to:"/reference/api/classes/flow-connect#tojson"},{default:s(()=>[F,y]),_:1}),B]),C,t("p",null,[P,o(n,{to:"/reference/api/classes/flow-connect#fromjson"},{default:s(()=>[N,k]),_:1}),z,o(n,{to:"/reference/api/interfaces/data-fetch-provider"},{default:s(()=>[J]),_:1}),R]),t("pre",null,[j,o(i),D,o(n,{to:"../types/raw"},{default:s(()=>[S]),_:1}),V,o(n,{to:"./raw-metadata"},{default:s(()=>[q]),_:1}),A])])}var M=r(l,[["render",I],["__file","data-persistence-provider.html.vue"]]);export{M as default};
